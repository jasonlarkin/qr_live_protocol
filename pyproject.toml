[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qr-live-protocol"
version = "1.0.0"
description = "Generate live, verifiable QR codes with cryptographic authentication for livestreaming and official video releases"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "QRLP Development Team", email = "contact@qrlp.org"}
]
keywords = ["qr-code", "livestream", "verification", "blockchain", "timestamp", "cryptography"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Video",
    "Topic :: Security :: Cryptography",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent"
]
requires-python = ">=3.8.1"
dependencies = [
    "qrcode[pil]==7.4.2",
    "Pillow>=10.0.0",
    "Flask==3.0.0",
    "Flask-CORS==4.0.0",
    "Flask-SocketIO==5.3.6",
    "click==8.1.7",
    "ntplib==0.4.0",
    "requests>=2.31.0",
    "python-dateutil>=2.8.2",
]

[project.optional-dependencies]
full = [
    "PyYAML>=6.0.1",
    "pyzbar>=0.1.9",
    "opencv-python>=4.8.0",
    "cryptography>=41.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.1",
    "pytest-xdist>=3.3.1",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.4.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-asyncio>=0.21.1",
    "pytest-xdist>=3.3.1",
]

[project.scripts]
qrlp = "src.cli:cli"
qr-live-protocol = "src.cli:cli"

[project.urls]
Homepage = "https://github.com/jasonlarkin/qr_live_protocol"
Documentation = "https://qrlp.readthedocs.io/"
Repository = "https://github.com/jasonlarkin/qr_live_protocol"
Issues = "https://github.com/jasonlarkin/qr_live_protocol/issues"
Discussions = "https://github.com/jasonlarkin/qr_live_protocol/discussions"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "system: marks tests as system tests",
    "acceptance: marks tests as acceptance tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "slow: marks tests as slow running",
    "web: marks tests as requiring web interface",
    "e2e: marks tests as end-to-end tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "ntplib.*",
    "qrcode.*",
    "PIL.*",
    "flask.*",
    "flask_cors.*",
    "flask_socketio.*",
    "click.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"] 